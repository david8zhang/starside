using UnityEngine;
using System.Collections;
using System;
using System.Collections.Generic;

public class Board : MonoBehaviour {

    //Board Attributes
    public bool populated = false;
    public const int boardSize = 10;

    //Actual board itself
    private int[,] boardCodes;
    private BoardTile[,] gridOutline;
    private EnemyTile[,] enemyOutline; 

    //Prefab objects
    public GameObject tilePrefab;
    public GameObject enemyTile;
    public GameObject enemyPrefab; 

    //Enemy attributes
    private int enemRangeX;
    private int enemRangeY;
    private int numEnemies;
    private List<Enemy> enemyList = new List<Enemy>(); 

    //Use this for preinitialization
    public void Awake()
    {
        //Initalize the gridOutline
        gridOutline = new BoardTile[boardSize, boardSize];
        enemyOutline = new EnemyTile[boardSize, boardSize];
        boardCodes = new int[boardSize, boardSize];
    }

	/// <summary>
	/// Inits the board.
	/// </summary>
	/// <param name="startpos">Startpos.</param>
	/// <param name="enemCount">Enem count.</param>
	/// <param name="enemHealth">Enem health.</param>
	/// <param name="enemDamage">Enem damage.</param>
	public void InitBoard(Vector3[] startpos, int enemCount, int[] enemHealth, int[] enemDamage)
    {
		for (int i = 0; i < enemCount; i++) {
			genEnemy(startpos[i], enemHealth[i], enemDamage[i], i);
		}
        populated = true; 
    }
	
	/// <summary>
	/// Gens the enemy.
	/// </summary>
	/// <param name="startpos">Startpos.</param>
	/// <param name="health">Health.</param>
	/// <param name="damage">Damage.</param>
	public void genEnemy(Vector3 startpos, int health, int damage, int code)
    {
		Debug.Log (startpos);
		GameObject enemy = Instantiate (enemyPrefab, startpos, Quaternion.identity) as GameObject;
		Enemy newenem = enemy.GetComponent<Enemy> ();
		newenem.setHealth (health);
		newenem.setDamage (damage);
		newenem.setCode (code);
		newenem.SetCurrPoint (code);
		enemyList.Add (newenem);
    }
    

    /// <summary>
    /// Return the enemy codes
    /// </summary>
    /// <param name="enemyCode"></param>
    /// <returns></returns>
    public Enemy getEnemy(int enemyCode)
    {
        foreach(Enemy e in enemyList)
        {
            if(e.getCode() == enemyCode)
            {
                return e; 
            }
        }
        return null; 
    }
    
    /// <summary>
    /// Return all enemies generated by this board
    /// </summary>
    /// <returns></returns>
    public List<Enemy> getEnemies()
    {
        return enemyList; 
    }

    /// <summary>
    /// Set the enemies generated by this board
    /// </summary>
    /// <param name="enemies"></param>
    public void setEnemies(List<Enemy> enemies)
    {
        enemyList = enemies; 
    }

    /// <summary>
    /// Remove enemies from this board's list of enemies
    /// </summary>
    /// <param name="enemy"></param>
    public void removeEnemy(Enemy enemy)
    {
        enemy.gameObject.SetActive(false);
        Debug.Log("Number of enemies before removal: " + enemyList.Count);
        enemyList.Remove(enemy);
        Debug.Log("Number of enemies after removal: " + enemyList.Count);
    }

    /// <summary>
    /// Check if the current board is populated
    /// </summary>
    /// <returns></returns>
    public bool isPopulated()
    {
        return populated; 
    }

	/// <summary>
	/// Creates the new tile.
	/// </summary>
	/// <returns>The new tile.</returns>
	/// <param name="prefab">Prefab.</param>
	/// <param name="x">The x coordinate.</param>
	/// <param name="y">The y coordinate.</param>
    public GameObject CreateNewTile(GameObject prefab, int x, int y)
    {
        GameObject o = Instantiate(prefab, new Vector3(x, y), Quaternion.identity) as GameObject;
        o.transform.SetParent(this.transform);
        o.GetComponent<SpriteRenderer>().color = new Color(1f, 1f, 1f, .5f);
        o.GetComponent<BoardTile>().board = this;
        return o;
    }

	/// <summary>
	/// Sets the enemies.
	/// </summary>
	/// <param name="numEnemies">Number enemies.</param>
    public void setEnemies(int numEnemies)
    {
        this.numEnemies = numEnemies; 
    }

	/// <summary>
	/// Gets the number enemies.
	/// </summary>
	/// <returns>The number enemies.</returns>
    public int getNumEnemies()
    {
        return numEnemies; 
    }

	/// <summary>
	/// Gets the board codes.
	/// </summary>
	/// <returns>The board codes.</returns>
    public int[,] getBoardCodes()
    {
        return boardCodes; 
    }
}
